{
  "translate:2556a1bb34b2492ea298385ad33f0d42:02f73dc88580694168e344f79bdb0684": {
    "response": {
      "success": true,
      "translated_strings": [
        {
          "original": "無法建立新的對話視窗",
          "key": "label.cannot_create_new_chat_window",
          "translation": "Cannot create a new chat window",
          "timestamp": 1756922900898
        },
        {
          "original": "AI 對話session額度已用盡，無法建立新的對話",
          "key": "label.ai_session_quota_exhausted",
          "translation": "AI session quota exhausted, cannot create new conversation",
          "timestamp": 1756922900898
        },
        {
          "original": "清除對話紀錄",
          "key": "btn.clear_chat_history",
          "translation": "Clear chat history",
          "timestamp": 1756922900898
        }
      ],
      "message": "Successfully processed /Users/fever_alanchao/feversocial/i18n-mcp-translator/app/src/hooks/useEditorErrorHandler.js. Found and translated 3 new strings. The lang.json file has been updated.",
      "suggestions": [
        {
          "i18nKey": "label.cannot_create_new_chat_window",
          "translations": {
            "en-US": "Cannot create a new chat window",
            "ja": "新しいチャットウィンドウを作成できません"
          },
          "originalText": "無法建立新的對話視窗"
        },
        {
          "i18nKey": "label.ai_session_quota_exhausted",
          "translations": {
            "en-US": "AI session quota exhausted, cannot create new conversation",
            "ja": "AI会話セッションの割り当てが上限に達したため、新しい会話を作成できません"
          },
          "originalText": "AI 對話session額度已用盡，無法建立新的對話"
        },
        {
          "i18nKey": "btn.clear_chat_history",
          "translations": {
            "en-US": "Clear chat history",
            "ja": "チャット履歴をクリア"
          },
          "originalText": "清除對話紀錄"
        }
      ],
      "content": [
        {
          "type": "text",
          "text": "Successfully processed /Users/fever_alanchao/feversocial/i18n-mcp-translator/app/src/hooks/useEditorErrorHandler.js. Found and translated 3 new strings. The lang.json file has been updated."
        },
        {
          "type": "resource",
          "resource": {
            "uri": "/Users/fever_alanchao/feversocial/i18n-mcp-translator/app/src/hooks/useEditorErrorHandler.js",
            "text": "import { useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport i18next from 'i18next';\nimport { sentryCaptureException } from 'sentry';\nimport * as editorErrTypes from 'config/editErrorTypes';\nimport {\n    showUnderstoodDialog,\n    showCloseDialog,\n    showCustomErrDialog,\n    closeSystemErrorDialog,\n    handlers\n} from 'editor/redux/modules/systemErrorDialog';\nimport { closeAssistant } from 'editor/redux/modules/aiAssistant';\nimport { contestGamesForUserPlayableUgc } from 'config/promoGameTypes';\nimport generateSameValObjByKeys from 'utils/generateSameValObjByKeys';\nimport { openFreshChat } from 'utils/intercom';\nimport { clearAllSessions } from 'api/aiAssistant';\nexport default function useEditorErrorHandler() {\n    const dispatch = useDispatch();\n    return useCallback(\n        ({ err = {} } = {}) => {\n            errorActionHandler(err, {\n                dispatch\n            });\n        },\n        [dispatch]\n    );\n}\nexport function errorActionHandler(errObj, { dispatch }) {\n    console.error(errObj);\n    if (errObj.extraInfo) console.error(errObj.extraInfo);\n    let errRole;\n    const { errType, data, gameType, promoUUID, sponsorId } = errObj.extraInfo ?? {};\n    switch (errType) {\n        case editorErrTypes.NO_PLAN:\n            return dispatch(\n                showCustomErrDialog({\n                    title: i18next.t('label.online_ready.error.plan'),\n                    desc: i18next.t('desc.online_ready.error.plan'),\n                    actionText: i18next.t('btn.upgrade'),\n                    handler: handlers.CUSTOM_ACTION,\n                    callback: openFreshChat\n                })\n            );\n        case editorErrTypes.NO_PLAN_FEATURE:\n            return dispatch(\n                showCustomErrDialog({\n                    title: i18next.t('label.online_ready.error.addedPurchaedFeature'),\n                    desc: i18next.t('desc.online_ready.error.addedPurchaedFeature'),\n                    actionText: i18next.t('btn.purchase'),\n                    handler: handlers.CUSTOM_ACTION,\n                    callback: openFreshChat\n                })\n            );\n        case editorErrTypes.MISSING_TIME_ZONE:\n            return dispatch(\n                showUnderstoodDialog({\n                    desc: i18next.t('desc.online_ready.error.time_zone')\n                })\n            );\n        case editorErrTypes.PERMISSION_DENIED:\n            return dispatch(\n                showUnderstoodDialog({\n                    desc: i18next.t('label.online_ready.error.no_publish_permission')\n                })\n            );\n        case editorErrTypes.PRIZE_PROBABILITY_NOT_FULL:\n            return dispatch(\n                showUnderstoodDialog({\n                    desc: i18next.t('desc.sum_probability_not_full_affect_prize_send')\n                })\n            );\n        case editorErrTypes.VALID_DATETIME_EMPTY:\n            errRole = getErrRole(data?.[0], promoUUID);\n            const noDateMessage = getErrorMessageByGameTypeAndRole(\n                gameType,\n                editorErrTypes.VALID_DATETIME_EMPTY,\n                errRole\n            );\n            const noDateDesc = noDateMessage || i18next.t('desc.online_ready.error.promo_date');\n            return dispatch(\n                showUnderstoodDialog({\n                    title: i18next.t('label.online_ready.error.promo_date'),\n                    desc: noDateDesc\n                })\n            );\n        case editorErrTypes.VALID_DATETIME_SETTING_ERROR:\n            return dispatch(\n                showUnderstoodDialog({\n                    desc: i18next.t('desc.online_ready.error.promo_setting_error')\n                })\n            );\n        case editorErrTypes.VALID_DATETIME_EXPIRED:\n            return dispatch(\n                showUnderstoodDialog({\n                    title: i18next.t('label.online_ready.error.expired_date'),\n                    desc: i18next.t('desc.online_ready.error.promo_date')\n                })\n            );\n        case editorErrTypes.VALID_DATETIME_RANGE_NOT_IN_PLAN:\n            return dispatch(\n                showUnderstoodDialog({\n                    title: i18next.t('label.online_ready.error.date_range'),\n                    desc: i18next.t('desc.warn.invalid_date_range')\n                })\n            );\n        case editorErrTypes.NEED_TO_EXTEND_PROMO_END_DATE:\n            errRole = getErrRole(data?.[0], promoUUID);\n            const needToExtendPromoEndDateMessage = getErrorMessageByGameTypeAndRole(\n                gameType,\n                editorErrTypes.NEED_TO_EXTEND_PROMO_END_DATE,\n                errRole\n            );\n            return dispatch(\n                showUnderstoodDialog({\n                    title: i18next.t('label.please_extend_promo_date'),\n                    desc:\n                        needToExtendPromoEndDateMessage ||\n                        i18next.t('desc.warn_date_setting_extended')\n                })\n            );\n        case editorErrTypes.INSTAGRAM_ID_NOT_FOUND:\n            return dispatch(\n                showUnderstoodDialog({\n                    desc: i18next.t('desc.game_instagram.error.ig_id_notfound')\n                })\n            );\n        case editorErrTypes.INSTAGRAM_ACCOUNT_EXPIRED:\n            return dispatch(\n                showUnderstoodDialog({\n                    desc: i18next.t('label.game_instagram.authorization_dialog.title')\n                })\n            );\n\n        // 此錯誤是上線訊息中心的campaign 時，若 campaign id 不正確，會出現此錯誤\n        case editorErrTypes.CAMPAIGN_ID_IS_INCORRECT:\n            return dispatch(\n                showUnderstoodDialog({\n                    desc: i18next.t('desc.game_instagram.error.campaign_id_incorrect')\n                })\n            );\n        case editorErrTypes.DUPLICATE_KEYWORD:\n            return dispatch(\n                showUnderstoodDialog({\n                    desc: i18next.t('desc.game_instagram.error.duplicate_keyword')\n                })\n            );\n        case editorErrTypes.DUPLICATE_HASHTAGS:\n            return dispatch(\n                showUnderstoodDialog({\n                    desc: i18next.t('desc.game_instagram.error.duplicate_hashtag')\n                })\n            );\n        case editorErrTypes.VERIFY_HASHTAGS_IS_NOT_EXIST:\n            return dispatch(\n                showUnderstoodDialog({\n                    desc: i18next.t('desc.game_instagram.error.hashtag_is_not_exist')\n                })\n            );\n        case editorErrTypes.VERIFY_PRIVATE_REPLY_KEYWORD_IS_NOT_EXIST:\n            return dispatch(\n                showUnderstoodDialog({\n                    desc: i18next.t('desc.game_instagram.error.private_reply_keyword_is_not_exist')\n                })\n            );\n        case editorErrTypes.VERIFY_HASHTAGS_NOT_EMPTY:\n            return dispatch(\n                showUnderstoodDialog({\n                    desc: i18next.t('desc.game_instagram.error.hashtag_not_empty')\n                })\n            );\n        case editorErrTypes.VERIFY_KEYWORD_NOT_EMPTY:\n            return dispatch(\n                showUnderstoodDialog({\n                    desc: i18next.t('desc.game_instagram.error.keyword_not_empty')\n                })\n            );\n        case editorErrTypes.TASK_HAS_NOT_BOUND_VALID_PROMOTION:\n            return dispatch(\n                showUnderstoodDialog({\n                    title: i18next.t('label.task_challenge.publish_error.promo_relation'),\n                    desc: i18next.t('desc.task_challenge.publish_error.promo_relation')\n                })\n            );\n        case editorErrTypes.REDEEM_POINT_POOL_UUID_NOT_FOUND:\n            return dispatch(\n                showUnderstoodDialog({\n                    desc: i18next.t('desc.game_point_redeem.error.point_pool_uuid_not_found')\n                })\n            );\n        case editorErrTypes.REDEEM_POINT_POOL_NOT_FOUND:\n            return dispatch(\n                showUnderstoodDialog({\n                    desc: i18next.t('desc.game_point_redeem.error.point_pool_is_empty')\n                })\n            );\n        case editorErrTypes.POINT_PLAN_DATE_INVALID:\n            return dispatch(\n                showUnderstoodDialog({\n                    desc: i18next.t('desc.point_system.error.date')\n                })\n            );\n        case editorErrTypes.POINT_POOL_STATUS_IS_PAUSE:\n            return dispatch(\n                showUnderstoodDialog({\n                    desc: i18next.t('desc.point_system.error.status_pause')\n                })\n            );\n        case editorErrTypes.POINT_POOL_STATUS_INVALID:\n            return dispatch(\n                showUnderstoodDialog({\n                    desc: i18next.t('desc.point_system.error.status_invalid')\n                })\n            );\n        case editorErrTypes.POINT_SYSTEM_VALID_FAILED_NO_RELATION:\n            return dispatch(\n                showUnderstoodDialog({\n                    desc: i18next.t('desc.point_system.error.no_relation')\n                })\n            );\n        case editorErrTypes.POINT_SYSTEM_VALID_FAILED_NO_PERMISSION:\n            return dispatch(\n                showUnderstoodDialog({\n                    desc: i18next.t('desc.point_system.error.no_permission')\n                })\n            );\n        case editorErrTypes.DEDUCTED_POINT_POOL_ID_NOT_FOUND:\n            return dispatch(\n                showUnderstoodDialog({\n                    desc: i18next.t('desc.point_deduct.error.point_pool_id')\n                })\n            );\n        case editorErrTypes.REWARD_POINT_POOL_ID_NOT_FOUND:\n            return dispatch(\n                showUnderstoodDialog({\n                    desc: i18next.t('desc.point_reward.error.point_pool_id')\n                })\n            );\n        case editorErrTypes.VERIFY_DEDUCTED_POINT_QUANTITY_IS_EMPTY:\n            return dispatch(\n                showUnderstoodDialog({\n                    desc: i18next.t('desc.point_deduct.error.quantity')\n                })\n            );\n        case editorErrTypes.POINT_POOL_DELETED:\n            return dispatch(\n                showUnderstoodDialog({\n                    desc: i18next.t('desc.point_system.error.deleted')\n                })\n            );\n        case editorErrTypes.PROMOTION_STATUS_INVALID:\n            return dispatch(\n                showUnderstoodDialog({\n                    desc: i18next.t('desc.promo.error.publish_status_invalid')\n                })\n            );\n        case editorErrTypes.MGM_SELF_LOGIN_REQUIRED:\n            return dispatch(\n                showUnderstoodDialog({\n                    title: i18next.t('label.dialog_hint.title.can_not_close_login'),\n                    desc: i18next.t(\n                        'label.dialog_hint.description.can_not_close_login_with_mgm_self'\n                    )\n                })\n            );\n        case editorErrTypes.SHARE_PRIZE_LOGIN_REQUIRED:\n            return dispatch(\n                showUnderstoodDialog({\n                    title: i18next.t('label.dialog_hint.can_not_enable_share_prize'),\n                    desc: i18next.t('label.dialog_hint.can_not_enable_share_prize.description')\n                })\n            );\n        case editorErrTypes.REVALIDATION_PERIOD_VALIDATION_WARNING:\n            return dispatch(\n                showUnderstoodDialog({\n                    title: i18next.t('dialog.title.featureActivationRestriction'),\n                    desc: i18next.t('desc.enable_revalidation.hint')\n                })\n            );\n        case editorErrTypes.AI_SESSION_LIMIT_EXCEEDED:\n            dispatch(closeAssistant());\n            return dispatch(\n                showCustomErrDialog({\n                    title: i18next.t('label.cannot_create_new_chat_window'),\n                    desc: i18next.t('label.ai_session_quota_exhausted'),\n                    actionText: i18next.t('btn.clear_chat_history'),\n                    title: i18next.t('label.cannot_create_new_dialog'),\n                    desc: i18next.t('label.ai_session_quota_exhausted'),\n                    actionText: i18next.t('label.clearChatHistory'),\n                    handler: sponsorId ? handlers.CUSTOM_ACTION : handlers.CLOSE,\n                    callback: async () => {\n                        if (sponsorId) {\n                            try {\n                                await clearAllSessions(sponsorId);\n                                dispatch(closeSystemErrorDialog());\n                            } catch (error) {\n                                console.error('Failed to clear sessions:', error);\n                            }\n                        }\n                    }\n                })\n            );\n        case editorErrTypes.UNEXPECTED_ERROR:\n        default:\n            const eventId = sentryCaptureException(errObj);\n            return dispatch(\n                showCloseDialog({\n                    title: i18next.t('label.unexpected_error'),\n                    desc: `${i18next.t('label.error_code')}: ${eventId}`\n                })\n            );\n    }\n}\nconst errRoles = {\n    PRIMARY: 'PRIMARY',\n    SECONDARY: 'SECONDARY',\n    BOTH: 'BOTH'\n};\nfunction getErrRole(data, primaryPromoUUID) {\n    // Handle different data structures\n    let roleUUIDS = [];\n    if (Array.isArray(data)) {\n        roleUUIDS = data;\n    } else if (data && typeof data === 'object') {\n        // For validation objects, extract the keys\n        roleUUIDS = Object.keys(data);\n    } else {\n        // Fallback for other data types\n        roleUUIDS = [];\n    }\n    if (roleUUIDS.length === 2) {\n        return errRoles.BOTH;\n    } else if (roleUUIDS.length === 1) {\n        return roleUUIDS[0] === primaryPromoUUID ? errRoles.PRIMARY : errRoles.SECONDARY;\n    } else {\n        // Default to PRIMARY if no role data available\n        return errRoles.PRIMARY;\n    }\n}\n\n// For UGC contest promo\nconst ugcContestErrMsg = {\n    [editorErrTypes.VALID_DATETIME_EMPTY]: {\n        [errRoles.PRIMARY]: () => {\n            const template = i18next.t('desc.warn_date_setting_uncompleted');\n            const replacement = i18next.t('label.vote');\n            return template.replace('{{replace}}', replacement);\n        },\n        [errRoles.SECONDARY]: () => {\n            const template = i18next.t('desc.warn_date_setting_uncompleted');\n            const replacement = i18next.t('label.ugc');\n            return template.replace('{{replace}}', replacement);\n        },\n        [errRoles.BOTH]: () => {\n            const template = i18next.t('desc.warn_date_setting_uncompleted');\n            const replacement = i18next.t('label.ugc_and_vote');\n            return template.replace('{{replace}}', replacement);\n        }\n    },\n    [editorErrTypes.NEED_TO_EXTEND_PROMO_END_DATE]: {\n        [errRoles.PRIMARY]: () => {\n            const template = i18next.t('desc.warn_date_setting_extended');\n            const replacement = i18next.t('label.vote');\n            return template.replace('{{replace}}', replacement);\n        },\n        [errRoles.SECONDARY]: () => {\n            const template = i18next.t('desc.warn_date_setting_extended');\n            const replacement = i18next.t('label.ugc');\n            return template.replace('{{replace}}', replacement);\n        },\n        [errRoles.BOTH]: () => {\n            const template = i18next.t('desc.warn_date_setting_extended');\n            const replacement = i18next.t('label.ugc_and_vote');\n            return template.replace('{{replace}}', replacement);\n        }\n    }\n};\n\n/**\n * {\n *  [gameType]: {\n *      [errType]: {\n *          [errRole]: () => <Trans />\n *      }\n *  }\n * }\n * Ex:\n * {\n *  16: {\n *      [errTypes.NO_DATE]: {\n *          [errRoles.PRIMARY]: () => <Trans />\n *      }\n *  }\n * }\n */\nconst errMsgByGameTypeAndRole = {\n    ...generateSameValObjByKeys([...contestGamesForUserPlayableUgc], ugcContestErrMsg)\n};\nfunction getErrorMessageByGameTypeAndRole(gameType, errType, errRole) {\n    // First try to get game-specific error message for this role\n    const gameSpecificMessages = errMsgByGameTypeAndRole[gameType];\n\n    // 比賽類型模組錯誤訊息要客製化化\n    if (\n        gameSpecificMessages &&\n        gameSpecificMessages[errType] &&\n        gameSpecificMessages[errType][errRole]\n    ) {\n        return gameSpecificMessages[errType][errRole]();\n    }\n\n    // No message found\n    return null;\n}\nexport { getErrRole, getErrorMessageByGameTypeAndRole, errRoles, errMsgByGameTypeAndRole };\n"
          }
        }
      ],
      "modified_code": "import { useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport i18next from 'i18next';\nimport { sentryCaptureException } from 'sentry';\nimport * as editorErrTypes from 'config/editErrorTypes';\nimport {\n    showUnderstoodDialog,\n    showCloseDialog,\n    showCustomErrDialog,\n    closeSystemErrorDialog,\n    handlers\n} from 'editor/redux/modules/systemErrorDialog';\nimport { closeAssistant } from 'editor/redux/modules/aiAssistant';\nimport { contestGamesForUserPlayableUgc } from 'config/promoGameTypes';\nimport generateSameValObjByKeys from 'utils/generateSameValObjByKeys';\nimport { openFreshChat } from 'utils/intercom';\nimport { clearAllSessions } from 'api/aiAssistant';\nexport default function useEditorErrorHandler() {\n    const dispatch = useDispatch();\n    return useCallback(\n        ({ err = {} } = {}) => {\n            errorActionHandler(err, {\n                dispatch\n            });\n        },\n        [dispatch]\n    );\n}\nexport function errorActionHandler(errObj, { dispatch }) {\n    console.error(errObj);\n    if (errObj.extraInfo) console.error(errObj.extraInfo);\n    let errRole;\n    const { errType, data, gameType, promoUUID, sponsorId } = errObj.extraInfo ?? {};\n    switch (errType) {\n        case editorErrTypes.NO_PLAN:\n            return dispatch(\n                showCustomErrDialog({\n                    title: i18next.t('label.online_ready.error.plan'),\n                    desc: i18next.t('desc.online_ready.error.plan'),\n                    actionText: i18next.t('btn.upgrade'),\n                    handler: handlers.CUSTOM_ACTION,\n                    callback: openFreshChat\n                })\n            );\n        case editorErrTypes.NO_PLAN_FEATURE:\n            return dispatch(\n                showCustomErrDialog({\n                    title: i18next.t('label.online_ready.error.addedPurchaedFeature'),\n                    desc: i18next.t('desc.online_ready.error.addedPurchaedFeature'),\n                    actionText: i18next.t('btn.purchase'),\n                    handler: handlers.CUSTOM_ACTION,\n                    callback: openFreshChat\n                })\n            );\n        case editorErrTypes.MISSING_TIME_ZONE:\n            return dispatch(\n                showUnderstoodDialog({\n                    desc: i18next.t('desc.online_ready.error.time_zone')\n                })\n            );\n        case editorErrTypes.PERMISSION_DENIED:\n            return dispatch(\n                showUnderstoodDialog({\n                    desc: i18next.t('label.online_ready.error.no_publish_permission')\n                })\n            );\n        case editorErrTypes.PRIZE_PROBABILITY_NOT_FULL:\n            return dispatch(\n                showUnderstoodDialog({\n                    desc: i18next.t('desc.sum_probability_not_full_affect_prize_send')\n                })\n            );\n        case editorErrTypes.VALID_DATETIME_EMPTY:\n            errRole = getErrRole(data?.[0], promoUUID);\n            const noDateMessage = getErrorMessageByGameTypeAndRole(\n                gameType,\n                editorErrTypes.VALID_DATETIME_EMPTY,\n                errRole\n            );\n            const noDateDesc = noDateMessage || i18next.t('desc.online_ready.error.promo_date');\n            return dispatch(\n                showUnderstoodDialog({\n                    title: i18next.t('label.online_ready.error.promo_date'),\n                    desc: noDateDesc\n                })\n            );\n        case editorErrTypes.VALID_DATETIME_SETTING_ERROR:\n            return dispatch(\n                showUnderstoodDialog({\n                    desc: i18next.t('desc.online_ready.error.promo_setting_error')\n                })\n            );\n        case editorErrTypes.VALID_DATETIME_EXPIRED:\n            return dispatch(\n                showUnderstoodDialog({\n                    title: i18next.t('label.online_ready.error.expired_date'),\n                    desc: i18next.t('desc.online_ready.error.promo_date')\n                })\n            );\n        case editorErrTypes.VALID_DATETIME_RANGE_NOT_IN_PLAN:\n            return dispatch(\n                showUnderstoodDialog({\n                    title: i18next.t('label.online_ready.error.date_range'),\n                    desc: i18next.t('desc.warn.invalid_date_range')\n                })\n            );\n        case editorErrTypes.NEED_TO_EXTEND_PROMO_END_DATE:\n            errRole = getErrRole(data?.[0], promoUUID);\n            const needToExtendPromoEndDateMessage = getErrorMessageByGameTypeAndRole(\n                gameType,\n                editorErrTypes.NEED_TO_EXTEND_PROMO_END_DATE,\n                errRole\n            );\n            return dispatch(\n                showUnderstoodDialog({\n                    title: i18next.t('label.please_extend_promo_date'),\n                    desc:\n                        needToExtendPromoEndDateMessage ||\n                        i18next.t('desc.warn_date_setting_extended')\n                })\n            );\n        case editorErrTypes.INSTAGRAM_ID_NOT_FOUND:\n            return dispatch(\n                showUnderstoodDialog({\n                    desc: i18next.t('desc.game_instagram.error.ig_id_notfound')\n                })\n            );\n        case editorErrTypes.INSTAGRAM_ACCOUNT_EXPIRED:\n            return dispatch(\n                showUnderstoodDialog({\n                    desc: i18next.t('label.game_instagram.authorization_dialog.title')\n                })\n            );\n\n        // 此錯誤是上線訊息中心的campaign 時，若 campaign id 不正確，會出現此錯誤\n        case editorErrTypes.CAMPAIGN_ID_IS_INCORRECT:\n            return dispatch(\n                showUnderstoodDialog({\n                    desc: i18next.t('desc.game_instagram.error.campaign_id_incorrect')\n                })\n            );\n        case editorErrTypes.DUPLICATE_KEYWORD:\n            return dispatch(\n                showUnderstoodDialog({\n                    desc: i18next.t('desc.game_instagram.error.duplicate_keyword')\n                })\n            );\n        case editorErrTypes.DUPLICATE_HASHTAGS:\n            return dispatch(\n                showUnderstoodDialog({\n                    desc: i18next.t('desc.game_instagram.error.duplicate_hashtag')\n                })\n            );\n        case editorErrTypes.VERIFY_HASHTAGS_IS_NOT_EXIST:\n            return dispatch(\n                showUnderstoodDialog({\n                    desc: i18next.t('desc.game_instagram.error.hashtag_is_not_exist')\n                })\n            );\n        case editorErrTypes.VERIFY_PRIVATE_REPLY_KEYWORD_IS_NOT_EXIST:\n            return dispatch(\n                showUnderstoodDialog({\n                    desc: i18next.t('desc.game_instagram.error.private_reply_keyword_is_not_exist')\n                })\n            );\n        case editorErrTypes.VERIFY_HASHTAGS_NOT_EMPTY:\n            return dispatch(\n                showUnderstoodDialog({\n                    desc: i18next.t('desc.game_instagram.error.hashtag_not_empty')\n                })\n            );\n        case editorErrTypes.VERIFY_KEYWORD_NOT_EMPTY:\n            return dispatch(\n                showUnderstoodDialog({\n                    desc: i18next.t('desc.game_instagram.error.keyword_not_empty')\n                })\n            );\n        case editorErrTypes.TASK_HAS_NOT_BOUND_VALID_PROMOTION:\n            return dispatch(\n                showUnderstoodDialog({\n                    title: i18next.t('label.task_challenge.publish_error.promo_relation'),\n                    desc: i18next.t('desc.task_challenge.publish_error.promo_relation')\n                })\n            );\n        case editorErrTypes.REDEEM_POINT_POOL_UUID_NOT_FOUND:\n            return dispatch(\n                showUnderstoodDialog({\n                    desc: i18next.t('desc.game_point_redeem.error.point_pool_uuid_not_found')\n                })\n            );\n        case editorErrTypes.REDEEM_POINT_POOL_NOT_FOUND:\n            return dispatch(\n                showUnderstoodDialog({\n                    desc: i18next.t('desc.game_point_redeem.error.point_pool_is_empty')\n                })\n            );\n        case editorErrTypes.POINT_PLAN_DATE_INVALID:\n            return dispatch(\n                showUnderstoodDialog({\n                    desc: i18next.t('desc.point_system.error.date')\n                })\n            );\n        case editorErrTypes.POINT_POOL_STATUS_IS_PAUSE:\n            return dispatch(\n                showUnderstoodDialog({\n                    desc: i18next.t('desc.point_system.error.status_pause')\n                })\n            );\n        case editorErrTypes.POINT_POOL_STATUS_INVALID:\n            return dispatch(\n                showUnderstoodDialog({\n                    desc: i18next.t('desc.point_system.error.status_invalid')\n                })\n            );\n        case editorErrTypes.POINT_SYSTEM_VALID_FAILED_NO_RELATION:\n            return dispatch(\n                showUnderstoodDialog({\n                    desc: i18next.t('desc.point_system.error.no_relation')\n                })\n            );\n        case editorErrTypes.POINT_SYSTEM_VALID_FAILED_NO_PERMISSION:\n            return dispatch(\n                showUnderstoodDialog({\n                    desc: i18next.t('desc.point_system.error.no_permission')\n                })\n            );\n        case editorErrTypes.DEDUCTED_POINT_POOL_ID_NOT_FOUND:\n            return dispatch(\n                showUnderstoodDialog({\n                    desc: i18next.t('desc.point_deduct.error.point_pool_id')\n                })\n            );\n        case editorErrTypes.REWARD_POINT_POOL_ID_NOT_FOUND:\n            return dispatch(\n                showUnderstoodDialog({\n                    desc: i18next.t('desc.point_reward.error.point_pool_id')\n                })\n            );\n        case editorErrTypes.VERIFY_DEDUCTED_POINT_QUANTITY_IS_EMPTY:\n            return dispatch(\n                showUnderstoodDialog({\n                    desc: i18next.t('desc.point_deduct.error.quantity')\n                })\n            );\n        case editorErrTypes.POINT_POOL_DELETED:\n            return dispatch(\n                showUnderstoodDialog({\n                    desc: i18next.t('desc.point_system.error.deleted')\n                })\n            );\n        case editorErrTypes.PROMOTION_STATUS_INVALID:\n            return dispatch(\n                showUnderstoodDialog({\n                    desc: i18next.t('desc.promo.error.publish_status_invalid')\n                })\n            );\n        case editorErrTypes.MGM_SELF_LOGIN_REQUIRED:\n            return dispatch(\n                showUnderstoodDialog({\n                    title: i18next.t('label.dialog_hint.title.can_not_close_login'),\n                    desc: i18next.t(\n                        'label.dialog_hint.description.can_not_close_login_with_mgm_self'\n                    )\n                })\n            );\n        case editorErrTypes.SHARE_PRIZE_LOGIN_REQUIRED:\n            return dispatch(\n                showUnderstoodDialog({\n                    title: i18next.t('label.dialog_hint.can_not_enable_share_prize'),\n                    desc: i18next.t('label.dialog_hint.can_not_enable_share_prize.description')\n                })\n            );\n        case editorErrTypes.REVALIDATION_PERIOD_VALIDATION_WARNING:\n            return dispatch(\n                showUnderstoodDialog({\n                    title: i18next.t('dialog.title.featureActivationRestriction'),\n                    desc: i18next.t('desc.enable_revalidation.hint')\n                })\n            );\n        case editorErrTypes.AI_SESSION_LIMIT_EXCEEDED:\n            dispatch(closeAssistant());\n            return dispatch(\n                showCustomErrDialog({\n                    title: i18next.t('label.cannot_create_new_chat_window'),\n                    desc: i18next.t('label.ai_session_quota_exhausted'),\n                    actionText: i18next.t('btn.clear_chat_history'),\n                    title: i18next.t('label.cannot_create_new_dialog'),\n                    desc: i18next.t('label.ai_session_quota_exhausted'),\n                    actionText: i18next.t('label.clearChatHistory'),\n                    handler: sponsorId ? handlers.CUSTOM_ACTION : handlers.CLOSE,\n                    callback: async () => {\n                        if (sponsorId) {\n                            try {\n                                await clearAllSessions(sponsorId);\n                                dispatch(closeSystemErrorDialog());\n                            } catch (error) {\n                                console.error('Failed to clear sessions:', error);\n                            }\n                        }\n                    }\n                })\n            );\n        case editorErrTypes.UNEXPECTED_ERROR:\n        default:\n            const eventId = sentryCaptureException(errObj);\n            return dispatch(\n                showCloseDialog({\n                    title: i18next.t('label.unexpected_error'),\n                    desc: `${i18next.t('label.error_code')}: ${eventId}`\n                })\n            );\n    }\n}\nconst errRoles = {\n    PRIMARY: 'PRIMARY',\n    SECONDARY: 'SECONDARY',\n    BOTH: 'BOTH'\n};\nfunction getErrRole(data, primaryPromoUUID) {\n    // Handle different data structures\n    let roleUUIDS = [];\n    if (Array.isArray(data)) {\n        roleUUIDS = data;\n    } else if (data && typeof data === 'object') {\n        // For validation objects, extract the keys\n        roleUUIDS = Object.keys(data);\n    } else {\n        // Fallback for other data types\n        roleUUIDS = [];\n    }\n    if (roleUUIDS.length === 2) {\n        return errRoles.BOTH;\n    } else if (roleUUIDS.length === 1) {\n        return roleUUIDS[0] === primaryPromoUUID ? errRoles.PRIMARY : errRoles.SECONDARY;\n    } else {\n        // Default to PRIMARY if no role data available\n        return errRoles.PRIMARY;\n    }\n}\n\n// For UGC contest promo\nconst ugcContestErrMsg = {\n    [editorErrTypes.VALID_DATETIME_EMPTY]: {\n        [errRoles.PRIMARY]: () => {\n            const template = i18next.t('desc.warn_date_setting_uncompleted');\n            const replacement = i18next.t('label.vote');\n            return template.replace('{{replace}}', replacement);\n        },\n        [errRoles.SECONDARY]: () => {\n            const template = i18next.t('desc.warn_date_setting_uncompleted');\n            const replacement = i18next.t('label.ugc');\n            return template.replace('{{replace}}', replacement);\n        },\n        [errRoles.BOTH]: () => {\n            const template = i18next.t('desc.warn_date_setting_uncompleted');\n            const replacement = i18next.t('label.ugc_and_vote');\n            return template.replace('{{replace}}', replacement);\n        }\n    },\n    [editorErrTypes.NEED_TO_EXTEND_PROMO_END_DATE]: {\n        [errRoles.PRIMARY]: () => {\n            const template = i18next.t('desc.warn_date_setting_extended');\n            const replacement = i18next.t('label.vote');\n            return template.replace('{{replace}}', replacement);\n        },\n        [errRoles.SECONDARY]: () => {\n            const template = i18next.t('desc.warn_date_setting_extended');\n            const replacement = i18next.t('label.ugc');\n            return template.replace('{{replace}}', replacement);\n        },\n        [errRoles.BOTH]: () => {\n            const template = i18next.t('desc.warn_date_setting_extended');\n            const replacement = i18next.t('label.ugc_and_vote');\n            return template.replace('{{replace}}', replacement);\n        }\n    }\n};\n\n/**\n * {\n *  [gameType]: {\n *      [errType]: {\n *          [errRole]: () => <Trans />\n *      }\n *  }\n * }\n * Ex:\n * {\n *  16: {\n *      [errTypes.NO_DATE]: {\n *          [errRoles.PRIMARY]: () => <Trans />\n *      }\n *  }\n * }\n */\nconst errMsgByGameTypeAndRole = {\n    ...generateSameValObjByKeys([...contestGamesForUserPlayableUgc], ugcContestErrMsg)\n};\nfunction getErrorMessageByGameTypeAndRole(gameType, errType, errRole) {\n    // First try to get game-specific error message for this role\n    const gameSpecificMessages = errMsgByGameTypeAndRole[gameType];\n\n    // 比賽類型模組錯誤訊息要客製化化\n    if (\n        gameSpecificMessages &&\n        gameSpecificMessages[errType] &&\n        gameSpecificMessages[errType][errRole]\n    ) {\n        return gameSpecificMessages[errType][errRole]();\n    }\n\n    // No message found\n    return null;\n}\nexport { getErrRole, getErrorMessageByGameTypeAndRole, errRoles, errMsgByGameTypeAndRole };\n",
      "performance": {
        "cache_hit": false,
        "processing_time": 4696,
        "api_calls_made": 1
      }
    },
    "timestamp": 1756922900942,
    "expiresAt": 1757527700942
  }
}